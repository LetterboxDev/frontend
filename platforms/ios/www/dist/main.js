angular.module("letterbox.controllers",[]),angular.module("letterbox.directives",[]),angular.module("letterbox.services",[]),angular.module("letterbox",["ionic","ionic.service.core","letterbox.controllers","letterbox.directives","letterbox.services","facebook","angularMoment","ui.slider","monospaced.elastic","ionic.ion.imageCacheFactory","ngCordova","ngResource","ngIOS9UIWebViewPatch"]).constant("VERSION",{major:0,minor:2,revision:0}).run(["$ionicPlatform","$rootScope","eventbus",function(e,t,o){t.$on("$stateChangeError",console.log.bind(console)),e.ready(function(){if(window.cordova){var e=new Ionic.Push({pluginConfig:{android:{icon:"notification",iconColor:"#fa5c4f"}}});e.register(function(e){window.localStorage.setItem("pushToken",e.token),o.call("pushTokenSet")})}"undefined"!=typeof navigator.splashscreen&&navigator.splashscreen.hide(),window.cordova&&window.cordova.plugins.Keyboard&&(cordova.plugins.Keyboard.hideKeyboardAccessoryBar(!0),cordova.plugins.Keyboard.disableScroll(!0)),window.StatusBar&&"android"==window.cordova.platformId?window.StatusBar.backgroundColorByHexString("#C84A3F"):window.StatusBar&&StatusBar.styleDefault()})}]).config(["FacebookProvider",function(e){e.init("1674828996062928")}]),angular.module("letterbox").config(["$stateProvider","$urlRouterProvider",function(e,t){e.state("login",{url:"/login",templateUrl:"templates/login.html",controller:"OnboardingCtrl"}).state("onboarding",{url:"/onboarding/:onboardStep",templateUrl:function(e){return"templates/onboard"+e.onboardStep+".html"},controller:"OnboardingCtrl"}).state("app",{url:"/app","abstract":!0,templateUrl:"templates/menu.html",controller:"AppCtrl"}).state("app.home",{url:"/home",views:{menuContent:{templateUrl:"templates/home.html",controller:"HomeCtrl"}}}).state("app.letter",{url:"/letter",views:{menuContent:{templateUrl:"templates/letter.html",controller:"LetterCtrl"}}}).state("app.chats",{url:"/chats",views:{menuContent:{templateUrl:"templates/chats.html",controller:"ChatsCtrl"}}}).state("app.chat",{url:"/chats/:chatId",views:{menuContent:{templateUrl:"templates/chat.html",controller:"ChatCtrl"}}}).state("app.notifications",{url:"/notifications",views:{menuContent:{templateUrl:"templates/notifications.html",controller:"NotificationsCtrl"}}}).state("app.categories",{url:"/categories",views:{menuContent:{templateUrl:"templates/categories.html",controller:"CategoriesCtrl"}}}).state("app.deals",{url:"/deals/:category",views:{menuContent:{templateUrl:"templates/deals.html",controller:"DealsCtrl"}}}).state("app.deal",{url:"/deal/:dealId/:roomHash",views:{menuContent:{templateUrl:"templates/deal.html",controller:"DealCtrl"}},cache:!1}).state("app.liked-deals",{url:"/liked-deals",views:{menuContent:{templateUrl:"templates/liked-deals.html",controller:"LikedDealsCtrl"}}}).state("app.response",{url:"/responses/:responseId:isExistingChat",views:{menuContent:{templateUrl:"templates/response.html",controller:"ResponseCtrl"}}}).state("app.profile",{url:"/profile",views:{menuContent:{templateUrl:"templates/profile.html",controller:"ProfileCtrl"}}}).state("app.other-profile",{url:"/other-profile/:userId",views:{menuContent:{templateUrl:"templates/other-profile.html",controller:"OtherProfileCtrl"}}}).state("app.other-letter",{url:"/other-letter/:roomHash",views:{menuContent:{templateUrl:"templates/other-letter.html",controller:"OtherLetterCtrl"}}}).state("app.settings",{url:"/settings",views:{menuContent:{templateUrl:"templates/settings.html",controller:"SettingsCtrl"}}});var o="/login";window.localStorage.getItem("token")&&(o="/app/home"),t.otherwise(o)}]),angular.module("letterbox.controllers").controller("AppCtrl",["$scope","$state","$location","$ionicPopup","$ionicLoading","eventbus","socket","LocationService","LocalNotificationService","BackgroundService","DbService","RoomsService","ChatService","AuthService","PushService","ChromeNotifService","VibrateService",function(e,t,o,n,r,i,a,s,c,l,u,d,m,f,p,g,h){e.username=window.localStorage.getItem("firstName")?window.localStorage.getItem("firstName"):"",i.registerListener("loginCompleted",u.init),i.registerListener("loginCompleted",a.init),i.registerListener("loginCompleted",s.updateLocation),i.registerListener("loginCompleted",p.updatePushToken),i.registerListener("loginCompleted",function(){e.username=window.localStorage.getItem("firstName")}),i.registerListener("dbInitialized",m.init),i.registerListener("dbInitialized",m.sync),i.registerListener("socketConnected",m.sync),i.registerListener("pushTokenSet",p.updatePushToken),i.registerListener("roomCreated",function(e){d.updateRooms(),n.confirm({title:e.approverName+" just started a chat with you!",template:"Start chatting?",cssClass:"popup-alert"}).then(function(o){o&&t.go("app.chat",{chatId:e.room.hash})})}),i.registerListener("letterReceived",function(e){n.confirm({title:"New Letter Received!",template:"Proceed to notifications?",cssClass:"popup-alert"}).then(function(e){e&&t.go("app.notifications")})}),window.addEventListener("focus",function(e){i.call("windowFocused")},!1),e.showLoading=function(){r.show({template:'<ion-spinner icon="ripple"></ion-spinner>'})},e.hideLoading=function(){r.hide()},window.localStorage.getItem("token")?(e.showLoading(),f.renewToken().then(function(){e.hideLoading(),i.call("loginCompleted"),"false"===window.localStorage.getItem("isRegistered")&&t.go("onboarding",{onboardStep:0})},function(){e.hideLoading();var o=n.alert({title:"Authentication Error!",template:"Please log in again",cssClass:"popup-alert"});o.then(function(e){t.go("login")})})):t.go("login"),e.currentPage=function(){return o.path().split("/")[2]}}]),angular.module("letterbox.controllers").controller("CardsCtrl",["$scope","$state","$element","$timeout","$ImageCacheFactory","$ionicHistory","eventbus","backend","letterService","MatchService","ReportService",function(e,t,o,n,r,i,a,s,c,l,u){function d(){0===e.cards.length?m():e.changeCard()}function m(){window.localStorage.getItem("token")&&0===e.cards.length&&!e.isLoading&&(e.isLoading=!0,l.getMatch().then(function(t){e.isLoading=!1,t&&(e.cards.push(p(t)),n(function(){g(".profile-card").removeClass("moving-in")},400))},function(){e.isLoading=!1}))}function f(){e.cards.shift()}function p(e){return{hashedId:e.hashedId,name:e.firstName,age:e.age,location:Math.floor(e.distance)+"km",bio:e.bio,profile_pic:e.pictureMed,questions:e.questions,mutual_friends_count:"undefined"==typeof e.mutualFriends?"unknown":e.mutualFriends.summary.total_count,likedDeals:e.likedDeals}}function g(e){return angular.element(o[0].querySelectorAll(e))}e.cards=[],e.isLoading=!1,a.registerListener("enterHome",m),a.registerListener("closeLetter",f),a.registerListener("changeGender",d),m(),e.changeCard=function(){g(".profile-card").addClass("moving-out"),n(e.addCard,100)},e.openSendLetter=function(e){i.nextViewOptions({disableAnimate:!1,disableBack:!1}),c.setTargetUserCard(e),t.go("app.letter")},e.addCard=function(){e.isLoading||(e.isLoading=!0,l.getMatch().then(function(t){e.cards.push(p(t)),n(function(){e.cards.splice(0,1),n(function(){g(".profile-card").removeClass("moving-in")},200),e.isLoading=!1},200)},function(){e.isLoading=!1,e.cards.splice(0,1)}))}}]),angular.module("letterbox.controllers").controller("CategoriesCtrl",["$scope","$state","CategoryService",function(e,t,o){e.isLoading=!0,o.getCategories().then(function(t){e.categories=t,e.isLoading=!1}),e.viewCategory=function(e){t.go("app.deals",{category:e})},e.viewLiked=function(){t.go("app.liked-deals")}}]),angular.module("letterbox.controllers").controller("ChatCtrl",["$scope","$state","$stateParams","$ionicScrollDelegate","$ionicModal","$window","$timeout","$ionicPopover","$ionicPopup","$ionicLoading","ChatService","DealService","RoomsService","socket",function(e,t,o,n,r,i,a,s,c,l,u,d,m,f){e.messages=[],e.recipient="",e.recipientId="",e.data={message:""},e.viewingDeals="mutual",e.fromSubPage=!1,e.deals={own:[],user:[],mutual:[]},e.limit=40,e.roomHash=o.chatId,e.room=m.getRoom(e.roomHash),s.fromTemplateUrl("templates/chatpopover.html",{scope:e}).then(function(t){e.popover=t});var p=function(){e.limit=40,e.$apply(),n.scrollBottom(!0)},g=function(){e.limit=40,e.$apply(),n.scrollBottom(!1)};e.$on("$ionicView.enter",function(t,o){u.getRecipientName(e.roomHash).then(function(t){e.recipient=t}),u.getRecipientHashedId(e.roomHash).then(function(t){e.recipientId=t}),u.getMessagesFromBackend(e.roomHash).then(function(t){u.setCurrentRoom(e.roomHash,e,n),e.fromSubPage||(e.messages=t,t.length&&f.roomRead(e.roomHash,t[t.length-1].timestamp.getTime()),n.scrollBottom(!1))}),window.addEventListener("native.keyboardhide",p,!1),window.addEventListener("native.keyboardshow",g,!1)}),e.$on("$ionicView.leave",function(e,t){window.removeEventListener("native.keyboardhide",p,!1),window.removeEventListener("native.keyboardshow",g,!1)}),e.loadPrevious=function(){var t=$(".messages-list > .list").height();e.limit=Math.min(e.limit+15,e.messages.length),e.$apply(),n.$getByHandle("chatScroll").scrollBy(0,$(".messages-list > .list").height()-t,!1)},e.onKeyPress=function(t){13===t.keyCode&&(t.preventDefault(),e.sendMessage())},e.sendMessage=function(){var t=e.data.message;t&&0!==t.length&&(f.sendMessage(e.roomHash,t),e.data.message="")},r.fromTemplateUrl("templates/deal-share-modal.html",{scope:e,animation:"slide-in-up"}).then(function(t){e.shareModal=t}),e.openShareModal=function(){d.checkDealCompatability(e.recipientId).then(function(){e.fetchLikedDeals(),e.shareModal.show()},function(){c.alert({title:e.recipient+"'s Letterbox doesn't support cutouts yet!",template:"Try informing "+e.recipient+" to get the latest Letterbox app",cssClass:"popup-alert"})})},e.closeShareModal=function(){e.shareModal.hide()},e.$on("$destroy",function(){e.shareModal.remove()}),e.showPopover=function(t){e.popover.show(t)},e.showOtherUserProfile=function(){e.showLoading(),u.getRecipientHashedId(e.roomHash).then(function(o){e.hideLoading(),e.fromSubPage=!0,t.go("app.other-profile",{userId:o})}),e.closePopover()},e.showLoading=function(){l.show({template:'<ion-spinner icon="dots"></ion-spinner>'})},e.hideLoading=function(){l.hide()},e.showResponses=function(){e.closePopover(),e.fromSubPage=!0,t.go("app.other-letter",{roomHash:e.roomHash})},e.closePopover=function(){e.popover.hide()},e.viewDeal=function(o){d.showShare=!0,e.fromSubPage=!0,t.go("app.deal",{dealId:o.id,roomHash:e.roomHash}),e.closeShareModal()},e.viewSharedDeal=function(o){d.showShare=!1,e.fromSubPage=!0,t.go("app.deal",{dealId:o.id})},e.fetchLikedDeals=function(){d.getOwnLikedDeals().then(function(t){e.deals.own=t}),d.getUserLikedDeals(e.recipientId).then(function(t){e.deals.user=t}),d.getMutualLikedDeals(e.recipientId).then(function(t){e.deals.mutual=t})}}]),angular.module("letterbox.controllers").controller("ChatsCtrl",["$scope","$state","RoomsService",function(e,t,o){e.chats=[],e.$on("$ionicView.enter",function(){o.setChatsPageScope(e),e.chats=o.getChats(),o.updateRooms()})}]),angular.module("letterbox.controllers").controller("DealCtrl",["$scope","$rootScope","$stateParams","$state","$sce","$ionicHistory","$ionicModal","$ionicScrollDelegate","$ionicSlideBoxDelegate","socket","DealService","ChatService",function(e,t,o,n,r,i,a,s,c,l,u,d){var m=o.dealId;u.getDeal(m).then(function(t){e.deal=t}),e.dealShareButton=u.showShare,e.shareDeal=function(){var t=o.roomHash;l.shareDeal(t,e.deal.title,e.deal.id),i.goBack(-1)},e.zoomMin=1,e.showImages=function(t){e.activeSlide=t,a.fromTemplateUrl("templates/deal-images-modal.html",{scope:e,animation:"slide-in-up"}).then(function(t){e.modal=t,e.modal.show()})},e.slide=function(e){c.slide(e)},e.closeModal=function(){e.modal.hide(),e.modal.remove()},e.updateSlideStatus=function(t){var o=s.$getByHandle("scrollHandle"+t).getScrollPosition().zoom;o==e.zoomMin?c.enableSlide(!0):c.enableSlide(!1)},e.openLink=function(e){window.open(e,"_system")}}]),angular.module("letterbox.controllers").controller("DealsCtrl",["$scope","$rootScope","$state","$stateParams","$ionicScrollDelegate","DealService",function(e,t,o,n,r,i){var a=n.category;e.currentCategory=a,e.deals=[],e.hasReachedEnd=!1,i.showShare=!1;var s=3,c=0;e.loadDeals=function(){"Featured"===e.currentCategory?i.getFeaturedDeals(c,s).then(e.appendDeals):i.getDeals(e.currentCategory,c,s).then(e.appendDeals)},e.appendDeals=function(t){for(var o=0;s>o;o++)t[o]?(e.deals.push(t[o]),c++):e.hasReachedEnd=!0;e.$broadcast("scroll.infiniteScrollComplete")},e.viewLiked=function(){o.go("app.liked-deals")}}]),angular.module("letterbox.controllers").controller("HomeCtrl",["$scope","$state","$ionicHistory","NotificationsService","RoomsService","eventbus",function(e,t,o,n,r,i){function a(){n.getNumberOfNotifications().then(function(t){e.numberOfLetters=t})}function s(){r.getTotalUnreadCount().then(function(t){e.numberOfMessages=t})}e.numberOfLetters=0,e.numberOfMessages=0,i.registerListener("letterReceived",a),i.registerListener("unreadCountChanged",s),e.$on("$ionicView.enter",function(){i.call("enterHome"),o.nextViewOptions({disableBack:!0}),a(),s()}),e.goNotifications=function(){t.go("app.notifications")}}]),angular.module("letterbox.controllers").controller("LetterCtrl",["$scope","$state","$ionicHistory","backend","letterService","eventbus","$timeout",function(e,t,o,n,r,i,a){function s(){e.selectedTab=-1}function c(t,o,n){s(),e.currentQuestion=o[t],e.selectedTab=n[t]}function l(e,t){e.forEach(function(e,o){e.answer=!1,1===t[o]&&(e.answer=!0)})}function u(){e.tooltipShown&&($(".button-next").qtip("destroy"),e.tooltipShown=!1)}e.$on("$ionicView.afterLeave",function(){$(".button-next").qtip("destroy"),o.clearCache()});var d=r.targetUserCard,m=d.questions;if(m){var f=[-1,-1,-1,-1,-1];e.curr=0,e.max=m.length-1,e.card=r.targetUserCard,e.userName=d.name,e.currentQuestion=d.questions[0],e.warning="",e.tooltipShown=!1,e.selectedTab=-1}else o.nextViewOptions({disableBack:!0}),t.go("app.home");e.nextQuestion=function(){return e.warning="",-1===f[e.curr]&&(f[e.curr]=e.selectedTab),e.curr===e.max&&5===f.length&&-1===f.indexOf(-1)?(u(),l(m,f),n.sendALetter(d.hashedId,m),o.goBack(),void i.call("closeLetter")):e.curr===e.max?void(e.warning="Please answer all questions."):(e.curr++,void c(e.curr,m,f))},e.prevQuestion=function(){u(),e.warning="",e.curr<=0||(-1===f[e.curr]&&(f[e.curr]=e.selectedTab),e.curr--,c(e.curr,m,f))},e.selectTab=function(t){e.selectedTab=t,e.curr<e.max&&a(function(){e.nextQuestion()},200),e.curr!==e.max||e.tooltipShown||($(".button-next").qtip({content:"Send the letter!",style:{classes:"qtip-tipsy"},show:{when:!1,ready:!0},hide:!1}),e.tooltipShown=!0)}}]),angular.module("letterbox.controllers").controller("LikedDealsCtrl",["$scope","$rootScope","$state","DealService",function(e,t,o,n){e.likedDeals=[];var r=function(){n.getOwnLikedDeals().then(function(t){e.likedDeals=t})};e.viewDeal=function(e){o.go("app.deal",{dealId:e.id})},r()}]),angular.module("letterbox.controllers").controller("NotificationsCtrl",["$scope","$state","$ionicModal","NotificationsService","RoomsService","eventbus","backend",function(e,t,o,n,r,i,a){function s(){e.isLoading=!0,n.getNotificationsList().then(function(t){e.notifications=t,e.isLoading=!1})}e.notifications=[],e.chats=[],e.isLoading=!1,e.currentTab=n.getTab(),e.setTab=function(t){e.currentTab=t,n.setTab(t)},i.registerListener("roomMessage",function(t){for(var o=t.message,n=0;n<e.chats.length;n++)if(e.chats[n].id===o.RoomHash){e.chats[n].last_message=(o.sender===window.localStorage.getItem("hashedId")?"You: ":e.chats[n].from+": ")+o.content,e.chats[n].last_activity=new Date(o.timeSent),o.sender!==window.localStorage.getItem("hashedId")&&e.chats[n].unread_count++;break}e.chats.sort(function(e,t){return t.last_activity.getTime()-e.last_activity.getTime()}),e.$apply()}),i.registerListener("letterReceived",s),e.$on("$ionicView.enter",function(t,o){r.setNotifsPageScope(e),s(),e.chats=r.getChats(),r.updateRooms()}),e.selectNotification=function(o){o.isRead=!0,e.selectedLetter=o,a.markLetterAsRead(o.id),t.go("app.response",{responseId:o.id})}}]),angular.module("letterbox.controllers").controller("OnboardingCtrl",["$scope","$state","$timeout","$ionicPopup","$ionicLoading","$ionicSlideBoxDelegate","$cordovaOauth","$ionicHistory","$cordovaInAppBrowser","$cordovaFacebook","Facebook","AuthService","backend","eventbus",function(e,t,o,n,r,i,a,s,c,l,u,d,m,f){function p(){var t=i.currentIndex();0==t?e.isAtStart=!0:t==i.slidesCount()-1?e.isAtEnd=!0:(e.isAtStart=!1,e.isAtEnd=!1)}function g(e){n.alert({title:e,cssClass:"popup-alert",okType:"button-stable"}).then(function(e){})}e.openTermsOfUse=function(){c.open("http://getletterbox.com/terms","_blank",{hardwareback:"yes",zoom:"no",closebuttoncaption:"Close",toolbarposition:"bottom"})},e.showLoading=function(){r.show({template:'<ion-spinner icon="ripple"></ion-spinner>'})},e.hideLoading=function(){r.hide()},e.authenticateToken=function(t){d.authToken(t).then(function(t){f.call("loginCompleted"),e.hideLoading(),e.beginOnboarding()},function(t){e.hideLoading();n.alert({title:"An error occurred!",template:"Please try again later",cssClass:"popup-alert"})})},e.doLogin=function(){e.showLoading(),window.cordova?l.login(["public_profile","user_birthday","user_photos","user_friends"]).then(function(t){e.authenticateToken(t.authResponse.accessToken)},function(t){e.hideLoading();n.alert({title:"An error when trying to login with Facebook!",template:"Please try again later",cssClass:"popup-alert"})}):u.login(function(t){if("connected"===t.status)e.authenticateToken(t.authResponse.accessToken);else{e.hideLoading();n.alert({title:"An error when trying to login with Facebook!",template:"Please try again later",cssClass:"popup-alert"})}},{scope:"public_profile,user_birthday,user_photos,user_friends",return_scopes:!0})},e.beginOnboarding=function(){d.isRegistered()?t.go("app.home"):t.go("onboarding",{onboardStep:0})},e.startOnboard=function(e){t.go("onboarding",{onboardStep:1})},e.isAtStart=!0,e.isAtEnd=!1,e.slide=function(e){i.slide(e),p()},e.prevSlide=function(){i.previous(),p()},e.nextSlide=function(){i.next(),p()},e.getRandomQuestions=function(){m.getRandomQuestions().$promise.then(function(t){e.questions=t.splice(0,5)},function(e){console.log("Couldn't retrive questions")})},e.getNewQn=function(t){var o=e.questions.map(function(e){return e.id});m.getOneRandomQuestion(o).$promise.then(function(o){var n=e.questions.indexOf(t);e.questions[n]=o},function(e){console.log("Couldn't retrive new question")})},e.selectOption=function(t,o){var n=e.questions.indexOf(t);t.answer=o,e.questions[n]=t},e.completeOnboardingStep1=function(){for(var t=0;5>t;t++)if("undefined"==typeof e.questions[t].answer)return void g("Please answer all your questions");var o=e.questions.map(function(e){return{id:e.id,answer:e.answer}});m.setQuestionsAndAnswers(o,function(t){e.completeOnboarding()},function(e){console.log("Couldn't save question and answers")})},e.completeOnboarding=function(){window.localStorage.setItem("isRegistered","true"),t.go("app.home")};var h=function(){s.clearHistory(),d.isLoggedIn()&&!e.questions&&e.getRandomQuestions()};h()}]),angular.module("letterbox.controllers").controller("OtherLetterCtrl",["$scope","$stateParams","RoomsService",function(e,t,o){var n=t.roomHash;o.getRoomLetter(n).then(function(t){e.letter=t})}]),angular.module("letterbox.controllers").controller("OtherProfileCtrl",["$scope","$stateParams","ProfileService",function(e,t,o){var n=t.userId;o.getOtherProfile(n).then(function(t){t.mutual_friends_count="undefined"==typeof t.mutualFriends?"unknown":t.mutualFriends.summary.total_count,e.user=t,e.user.name=e.user.firstName,e.user.profile_pic=e.user.pictureMed})}]),angular.module("letterbox.controllers").controller("ProfileCtrl",["$scope","$state","$ionicHistory","$ionicPopup","$ionicLoading","$ionicModal","ProfileService",function(e,t,o,n,r,i,a){function s(){return e.profile.bio.length>0}function c(){for(var t=0;5>t;t++)if("undefined"==typeof e.profile.questions[t].answer)return!1;return!0}function l(e){n.alert({title:e,cssClass:"popup-alert",okType:"button-stable"}).then(function(e){})}function u(){n.alert({title:"Your profile has been updated!",cssClass:"popup-alert"}).then(function(e){})}e.profile={},e.isLoading=!0,e.profilePhotos=[],e.isLoadingPhotos=!1,e.$on("$ionicView.enter",function(t,o){a.getProfile().then(function(t){e.profile=t,e.nameAndAge=t.firstName+", "+t.age,e.isLoading=!1})}),i.fromTemplateUrl("templates/photo-modal.html",{scope:e,animation:"slide-in-up"}).then(function(t){e.modal=t}),e.$on("$ionicView.enter",function(){o.nextViewOptions({disableBack:!0})}),e.showLoading=function(){r.show({template:'<ion-spinner icon="ripple"></ion-spinner>'})},e.hideLoading=function(){r.hide()},e.openProfilePhotoModal=function(){e.isLoadingPhotos=!0,e.modal.show(),a.getProfilePictures().then(function(t){e.profilePhotos=t,e.isLoadingPhotos=!1},function(t){e.isLoadingPhotos=!1})},e.updateProfilePhoto=function(t){e.hideProfilePhotoModal(),e.showLoading(),a.updateProfilePicture(t).then(function(t){e.profile.pictureMed=t.pictureMed,e.profile.pictureThumb=t.pictureThumb,e.hideLoading()},function(t){e.hideLoading()})},e.hideProfilePhotoModal=function(){e.modal.hide()},e.getNewQn=function(t){var o=e.profile.questions.map(function(e){return e.id});a.getNewQuestion(o).then(function(o){var n=e.profile.questions.indexOf(t);e.profile.questions[n]=o})},e.selectOption=function(t,o){var n=e.profile.questions.indexOf(t);t.answer=o,e.profile.questions[n]=t},e.onEnterText=function(){},e.updateProfile=function(){var t=[];if(s()?a.updateBio(e.profile.bio):t.push("Please enter a bio"),c()){var o=e.profile.questions.map(function(e){return{id:e.id,answer:e.answer}});a.updateQuestions(o)}else t.push("Please answer all questions");t.length>0?l(t.join(" & ")):u()}}]),angular.module("letterbox.controllers").controller("ResponseCtrl",["$scope","$state","$stateParams","$ionicHistory","backend","NotificationsService","ProfileService","ReportService",function(e,t,o,n,r,i,a,s){function c(){o.isExistingChat?e.isExistingChat=o.isExistingChat:e.isExistingChat=!1,i.getNotificationsList().then(function(t){i.getNotificationFromId(o.responseId).then(function(t){e.response=t,e.numCorrect=t.questionsAnswers.filter(function(e){return 1==e.isCorrect}).length,a.getOtherProfile(t.userId).then(function(t){e.response.mutual_friends_count="undefined"==typeof t.mutualFriends?"unknown":t.mutualFriends.summary.total_count,e.response.likedDeals=t.likedDeals})})})}c(),n.nextViewOptions({disableBack:!0}),e.rejectLetter=function(e){r.rejectLetter(e.id,function(){t.go("app.notifications")})},e.approveLetter=function(e){r.approveLetter(e.id,function(e){t.go("app.chat",{chatId:e.hash})})},e.viewDeal=function(e){t.go("app.deal",{dealId:e.id}),n.nextViewOptions({disableBack:!1})},e.reportUser=function(t,o,n){s.showReportPopup(t,o,e,n)}}]),angular.module("letterbox.controllers").controller("SettingsCtrl",["$scope","$state","$ionicPopup","$cordovaInAppBrowser","backend","AuthService","eventbus","VERSION",function(e,t,o,n,r,i,a,s){e.minAge=18,e.maxAge=80,e.versionMajor=s.major,e.versionMinor=s.minor,e.versionRevision=s.revision;var c=window.localStorage.getItem("perfectMatch"),l=window.localStorage.getItem("genderPreference"),u=window.localStorage.getItem("distanceRadius"),d=window.localStorage.getItem("minAge"),m=window.localStorage.getItem("maxAge");e.preference={perfectMatch:"true"===c?!0:!1,preferredGender:l,distanceRadius:null==u?50:u,age:{min:null===d?e.minAge:d,max:null===m?e.maxAge:m}},e.onChangePerfectMatch=function(){window.localStorage.setItem("perfectMatch",e.preference.perfectMatch),r.updatePerfectMatch(e.preference.perfectMatch)},e.onChangePreferredGender=function(){a.call("changeGender"),window.localStorage.setItem("genderPreference",e.preference.preferredGender),r.updateGenderPreference(e.preference.preferredGender)},e.onChangeDistanceRadius=function(){window.localStorage.setItem("distanceRadius",e.preference.distanceRadius)},e.$watch("preference.age",function(){isNaN(e.preference.age.min)||window.localStorage.setItem("minAge",e.preference.age.min),isNaN(e.preference.age.max)||window.localStorage.setItem("maxAge",e.preference.age.max)},!0),e.openTermsOfUse=function(){n.open("http://getletterbox.com/terms","_blank",{hardwareback:"yes",zoom:"no",closebuttoncaption:"Close",toolbarposition:"bottom"})},e.openPrivacyPolicy=function(){n.open("http://getletterbox.com/privacy","_blank",{hardwareback:"yes",zoom:"no",closebuttoncaption:"Close",toolbarposition:"bottom"})},e.logout=function(){o.confirm({title:"Are you sure you want to logout?",cssClass:"popup-alert",okType:"button-positive",okText:"Logout",cancelText:"No"}).then(function(e){e&&i.logout().then(function(){t.go("login")})})},e.feedback=function(){n.open("https://www.facebook.com/getletterbox","_blank",{hardwareback:"yes",zoom:"no",closebuttoncaption:"Close",toolbarposition:"bottom"})}}]),angular.module("letterbox.directives").directive("dealCard",["$document",function(e){return{scope:{data:"=set"},restrict:"EA",replace:!0,controller:["$scope","$state","DealService",function(e,t,o){e.learnMore=function(e){t.go("app.deal",{dealId:e.id})}}],controllerAs:"ctrl",bindToController:!0,templateUrl:"templates/deal-card.html"}}]),angular.module("letterbox.directives").directive("dealLikeBtn",["$document",function(e){return{scope:{data:"=set"},restrict:"EA",replace:!0,controller:["$scope","$state","DealService",function(e,t,o){e.toggleLike=function(){e.ctrl.data.isLiked=!e.ctrl.data.isLiked,e.ctrl.data.isLiked?e.ctrl.data.likeCount++:e.ctrl.data.likeCount--,o.toggleDealLike(e.ctrl.data.id)}}],controllerAs:"ctrl",bindToController:!0,templateUrl:"templates/deal-like-button.html"}}]),angular.module("letterbox.directives").directive("flipCard",["$document",function(e){return{restrict:"A",link:function(e,t,o){angular.element(t[0].querySelectorAll(".button-flip")).on("touch",function(e){t.toggleClass("flipped")})}}}]),angular.module("letterbox.directives").directive("noScroll",["$document",function(e){return{restrict:"A",link:function(t,o,n){e.on("touchmove",function(e){e.preventDefault()})}}}]),angular.module("letterbox.directives").directive("profileCard",["$ionicHistory",function(e){return{scope:{},controller:["$scope","ReportService","$state","DealService",function(t,o,n,r){t.reportUser=function(e,n,r){o.showReportPopup(e,n,t,r)}.bind(this),t.viewDeal=function(t){e.nextViewOptions({disableBack:!1}),n.go("app.deal",{dealId:t.id})}.bind(this)}],controllerAs:"ctrl",bindToController:{data:"=info",callback:"&"},replace:!0,transclude:!0,templateUrl:"templates/profile-card.html"}}]),angular.module("letterbox.directives").directive("profilePicSmall",["$document",function(e){return{scope:{data:"=set"},restrict:"EA",replace:!0,controller:["$scope","$ionicModal",function(e,t){e.showProfilePic=function(){t.fromTemplateUrl("templates/profile-pic-modal.html",{scope:e,animation:"slide-in-up"}).then(function(t){e.modal=t,e.modal.show()})},e.closeModal=function(){e.modal.hide(),e.modal.remove()}}],controllerAs:"ctrl",bindToController:!0,templateUrl:"templates/profile-pic-small.html"}}]),angular.module("ngIOS9UIWebViewPatch",["ng"]).config(["$provide",function(e){"use strict";e.decorator("$browser",["$delegate","$window",function(e,t){function o(e){return/(iPhone|iPad|iPod).* OS 9_\d/.test(e)&&!/Version\/9\./.test(e)}function n(e){function t(){o=null}var o=null,n=e.url;return e.url=function(){return arguments.length?(o=arguments[0],n.apply(e,arguments)):o||n.apply(e,arguments)},window.addEventListener("popstate",t,!1),window.addEventListener("hashchange",t,!1),e}return o(t.navigator.userAgent)?n(e):e}])}]),angular.module("letterbox.services").service("LocationService",["$cordovaGeolocation","backend",function(e,t){function o(e){i(e.coords.latitude,e.coords.longitude)}function n(){var t={timeout:1e4,enableHighAccuracy:!1};e.getCurrentPosition(t).then(o)}function r(){navigator.geolocation&&navigator.geolocation.getCurrentPosition(o)}function i(e,o){t.updateUserLocation(e,o)}var a={};return a.updateLocation=function(){window.cordova?n():r()},a}]),angular.module("letterbox.services").service("AuthService",["$q","$ionicHistory","$cordovaFacebook","backend","eventbus","DbService","socket",function(e,t,o,n,r,i,a){function s(e){window.localStorage.setItem("token",e.letterbox_token),window.localStorage.setItem("firstName",e.user.firstName),window.localStorage.setItem("hashedId",e.user.hashedId),window.localStorage.setItem("isRegistered",e.user.isRegistered),window.localStorage.setItem("genderPreference",e.user.genderPreference),window.localStorage.setItem("perfectMatch",e.user.perfectMatch)}var c={};return c.authToken=function(t){var o=e.defer();return n.auth(t).$promise.then(function(e){s(e),n.updateVersion(),o.resolve()},function(e){o.reject()}),o.promise},c.renewToken=function(){var t=e.defer();return n.renewToken().$promise.then(function(e){s(e),n.updateVersion(),t.resolve()},function(e){c.logout().then(function(){t.reject()})}),t.promise},c.isLoggedIn=function(){return null!==window.localStorage.getItem("token")&&window.localStorage.getItem("token").length>0},c.isRegistered=function(){return c.isLoggedIn()&&"true"===window.localStorage.getItem("isRegistered")},c.logout=function(){var r=e.defer();return n.clearPushToken().then(function(){t.clearCache().then(function(){window.localStorage.setItem("token",""),window.localStorage.setItem("firstName",""),window.localStorage.setItem("hashedId",""),window.localStorage.setItem("isRegistered",""),window.localStorage.setItem("genderPreference",""),window.localStorage.setItem("perfectMatch",""),window.cordova&&o.logout(),a.uninit(),i.isInitialized()?i.clearAll().then(function(){r.resolve()}):r.resolve()})},function(){r.reject()}),r.promise},c}]),angular.module("letterbox.services").service("backend",["$q","$resource","$http","VERSION",function(e,t,o,n){function r(){return window.localStorage.getItem("token")}var i={},a="http://ec2-52-74-138-177.ap-southeast-1.compute.amazonaws.com",s="/auth",c="/auth/renew",l="/user/self",u="/user/id/:userId",d="/user/pushtoken",m="/user/perfectmatch",f="/user/location",p="/user/bio",g="/user/photo",h="/user/genderPreference",v="/match",w="/matches",b="/questions",S="/question",k="/messages",L="/rooms",I="/room/:roomId",C="/rooms/:roomId",R="/letters",$="/letters/:letterId",T="/report",x="/user/id/:hashedId/version",P="/user/version",E="/deal/featured",y="/deal/cat",A="/deal/cat/:dealCat",D="/deal/id/:dealId",U="/deal/user/:otherUserId",M="/deal/mutual/:otherUserId",N=t(a.concat(s),{},{get:{method:"GET"}}),O=t(a.concat(c),{},{get:{method:"GET"}}),q=t(a.concat(v),{},{get:{method:"GET"}}),_=t(a.concat(w),{},{get:{method:"GET",isArray:!0}}),H=t(a.concat(g),{},{get:{method:"GET",isArray:!0},setPhoto:{method:"PUT",params:{letterbox_token:"@token"}}}),B=t(a.concat(l),{},{get:{method:"GET"}}),j=t(a.concat(d),{},{updatePushToken:{method:"PUT",params:{letterbox_token:"@token"}},clearPushToken:{method:"DELETE",params:{letterbox_token:"@token"}}}),F=t(a.concat(m),{},{updatePerfectMatch:{method:"PUT",params:{letterbox_token:"@token"}}}),G=t(a.concat(f),{},{updateLocation:{method:"PUT",params:{letterbox_token:"@token"}}}),z=t(a.concat(p),{},{updateBio:{method:"PUT",params:{letterbox_token:"@token"}}}),V=t(a.concat(h),{},{updateGenderPreference:{method:"PUT",params:{letterbox_token:"@token"}}}),Q=t(a.concat(b),{},{get:{method:"GET",isArray:!0},updateQuestions:{method:"PUT",params:{letterbox_token:"@token"}}}),W=t(a.concat(S),{},{get:{method:"GET"}}),Y=t(a.concat(k),{},{get:{method:"GET",isArray:!0}}),K=t(a.concat(L),{},{get:{method:"GET",isArray:!0}}),X=t(a.concat(I),{roomId:"@roomId"},{get:{method:"GET"}}),J=t(a.concat(C),{roomId:"@roomId"},{get:{method:"GET",isArray:!0}}),Z=t(a.concat(u),{},{get:{method:"GET"}}),ee=t(a.concat(R),{},{get:{method:"GET",isArray:!0},createLetter:{method:"POST",params:{letterbox_token:"@token"}}}),te=t(a.concat($),{letterId:"@letterId"},{approveLetter:{method:"POST",params:{letterbox_token:"@token"}},readLetter:{method:"PUT",params:{letterbox_token:"@token"
}},rejectLetter:{method:"DELETE",params:{letterbox_token:"@token"}}}),oe=t(a.concat(T),{},{reportUser:{method:"POST",params:{letterbox_token:"@token"}}}),ne=t(a.concat(E),{},{get:{method:"GET",isArray:!0}}),re=t(a.concat(y),{},{get:{method:"GET",isArray:!0}}),ie=t(a.concat(A),{dealCat:"@dealCat"},{get:{method:"GET",isArray:!0}}),ae=t(a.concat(D),{dealId:"@dealId"},{get:{method:"GET"},likeDeal:{method:"PUT",params:{letterbox_token:"@token"}}}),se=t(a.concat(U),{otherUserId:"@otherUserId"},{get:{method:"GET",isArray:!0}}),ce=t(a.concat(M),{},{get:{method:"GET",isArray:!0}}),le=t(a.concat(x),{hashedId:"@hashedId"},{get:{method:"GET"}}),ue=t(a.concat(P),{},{update:{method:"PUT",params:{letterbox_token:"@token"}}});return i.auth=function(e){return N.get({fb_token:e})},i.renewToken=function(){var e=r();return O.get({letterbox_token:e})},i.getMatch=function(e,t,o,n){var i=r();return q.get({letterbox_token:i,maxDistance:e,previousId:t,minAge:o,maxAge:n})},i.getMatches=function(e,t,o){var n=r();return _.get({letterbox_token:n,maxDistance:e,limit:t,previousId:o})},i.getUserSelf=function(){var e=r();return B.get({letterbox_token:e})},i.updatePushToken=function(e){var t=r();return updater=new j,updater.token=t,updater.pushToken=e,updater.$updatePushToken()},i.clearPushToken=function(){var t=e.defer(),o=r();return updater=new j,updater.token=o,updater.$clearPushToken(t.resolve,t.reject),t.promise},i.updatePerfectMatch=function(e){var t=r();return updater=new F,updater.token=t,updater.perfectMatch=e,updater.$updatePerfectMatch()},i.updateUserLocation=function(e,t,o){var n=r();return locationUpdater=new G,locationUpdater.token=n,locationUpdater.latitude=e,locationUpdater.longitude=t,locationUpdater.$updateLocation(o)},i.getProfilePhotos=function(){var e=r();return H.get({letterbox_token:e})},i.setProfilePhoto=function(e,t,o){var n=r();return handler=new H,handler.token=n,handler.id=e,handler.$setPhoto(t,o)},i.updateUserBio=function(e,t,o){var n=r(),i=new z;return i.token=n,i.bio=e,i.$updateBio(t,o)},i.updateGenderPreference=function(e,t){var o=r();return genderPreferenceUpdater=new V,genderPreferenceUpdater.token=o,genderPreferenceUpdater.genderPreference=e,genderPreferenceUpdater.$updateGenderPreference(t)},i.getRandomQuestions=function(){var e=r();return Q.get({letterbox_token:e})},i.getOneRandomQuestion=function(e){var t=r();return W.get({letterbox_token:t,currentQuestionIds:e})},i.setQuestionsAndAnswers=function(e,t,o){var n=r(),i=new Q;return i.token=n,i.questions=e,i.$updateQuestions(t,o)},i.getMessages=function(e){var t=r();return Y.get({letterbox_token:t,since:e})},i.getRooms=function(){var e=r();return K.get({letterbox_token:e})},i.getSingleRoom=function(e){var t=r();return X.get({letterbox_token:t,roomId:e})},i.getRoomMessages=function(e,t){var o=r();return J.get({letterbox_token:o,roomId:e,since:t})},i.getOtherUser=function(e){var t=r();return Z.get({userId:e,letterbox_token:t})},i.getAllLetters=function(){var e=r();return ee.get({letterbox_token:e})},i.sendALetter=function(e,t,o,n){var i=r();return handler=new ee,handler.token=i,handler.recipient=e,handler.questions=t,handler.$createLetter(o,n)},i.markLetterAsRead=function(e,t,o){var n=r();return handler=new te,handler.token=n,handler.letterId=e,handler.$readLetter(t,o)},i.approveLetter=function(e,t,o){var n=r();return handler=new te,handler.token=n,handler.letterId=e,handler.$approveLetter(t,o)},i.rejectLetter=function(e,t,o){var n=r();return handler=new te,handler.token=n,handler.letterId=e,handler.$rejectLetter(t,o)},i.reportUser=function(e,t,o,n){var i=r();return handler=new oe,handler.token=i,handler.userId=e,handler.reason=t,handler.$reportUser(o,n)},i.getFeaturedDeals=function(t,o){var n=e.defer();return ne.get({letterbox_token:r(),offset:t,limit:o}).$promise.then(function(e){var t=[];e.forEach(function(e){t.push(e)}),n.resolve(t)},n.reject),n.promise},i.getDealCategories=function(){var t=e.defer();return re.get({letterbox_token:r()}).$promise.then(function(e){var o=[];e.forEach(function(e){o.push(e)}),t.resolve(o)},t.reject),t.promise},i.getDealsByCat=function(t,o,n){var i=e.defer();return ie.get({letterbox_token:r(),dealCat:t,offset:o,limit:n}).$promise.then(function(e){var t=[];e.forEach(function(e){t.push(e)}),i.resolve(t)},i.reject),i.promise},i.getDealById=function(t){var o=e.defer();return ae.get({letterbox_token:r(),dealId:t}).$promise.then(o.resolve,o.reject),o.promise},i.toggleDealLike=function(t){var o=e.defer();return handler=new ae,handler.token=r(),handler.$likeDeal({dealId:t},o.resolve,o.reject),o.promise},i.getUserLikedDeals=function(t){var o=e.defer();return se.get({letterbox_token:r(),otherUserId:t}).$promise.then(function(e){var t=[];e.forEach(function(e){t.push(e)}),o.resolve(t)},o.reject),o.promise},i.getMutualLikedDeals=function(t){var o=e.defer();return ce.get({letterbox_token:r(),otherUserId:t}).$promise.then(function(e){var t=[];e.forEach(function(e){t.push(e)}),o.resolve(t)},o.reject),o.promise},i.getOtherUserVersion=function(t){var o=e.defer();return le.get({letterbox_token:r(),hashedId:t}).$promise.then(o.resolve,o.reject),o.promise},i.updateVersion=function(){var t=e.defer();return handler=new ue,handler.token=r(),handler.major=n.major,handler.minor=n.minor,handler.revision=n.revision,handler.$update(t.resolve,t.reject),t.promise},i}]),angular.module("letterbox.services").service("BackgroundService",function(){function e(){n=!1;for(var e=0;e<a.length;e++)a[e]()}function t(){n=!0;for(var e=0;e<i.length;e++)i[e]()}function o(){document.addEventListener("pause",e,!1),document.addEventListener("resume",t,!1)}var n=!0,r={},i=[],a=[];return r.isInBackground=function(){return window.cordova?!n:!window.document.hasFocus()},r.registerOnResume=function(e){i.push(e)},r.registerOnPause=function(e){a.push(e)},document.addEventListener("deviceready",o,!1),r}),angular.module("letterbox.services").service("CategoryService",["$q","backend",function(e,t){var o=this;o.getCategories=function(){var o=e.defer();return t.getDealCategories().then(o.resolve,o.reject),o.promise}}]),angular.module("letterbox.services").service("ChatService",["$q","$state","RoomsService","DbService","DealService","BackgroundService","backend","socket","eventbus",function(e,t,o,n,r,i,a,s,c){function l(e){n.addMessage(e.RoomHash,e.sender,e.content,e.timeSent,e.isRead,e.type,e.DealId)}function u(e,t){n.markMessagesAsRead(e,t)}function d(e){return"undefined"!=typeof p[e]?p[e]:null}function m(){var e=d(g);g&&t.includes("app.chat",{chatId:g})&&null!==e&&e.length>0&&s.roomRead(g,e[e.length-1].timestamp.getTime())}var f={},p={},g="",h=null,v=null;return c.registerListener("windowFocused",m),i.registerOnResume(m),c.registerListener("roomMessage",function(e){var o=e.message,n=d(o.RoomHash);if(null!==n){var r=f.formatMessage(o);n.push(r),o.RoomHash===g&&(h.limit=40,h.$apply(),v.scrollBottom(!0))}!i.isInBackground()&&t.includes("app.chat",{chatId:e.message.RoomHash})&&s.roomRead(e.message.RoomHash,e.message.timeSent)}),f.setCurrentRoom=function(e,t,o){e!==g&&(g=e),h=t,v=o},f.init=function(){window.cordova&&n.isInitialized()&&(c.registerListener("roomMessage",function(e){l(e.message)}),c.registerListener("roomRead",function(e){u(e.roomHash,e.time)}))},f.sync=function(){window.cordova&&n.isInitialized()&&n.getLatestTimeSent().then(function(e){a.getMessages(e).$promise.then(function(e){e.forEach(function(e){l(e)})})})},f.formatMessage=function(e){var t={isOwner:e.sender===window.localStorage.getItem("hashedId"),content:e.content,timestamp:new Date(e.timeSent),type:e.type};return"share"!==e.type||e.Deal?"share"===e.type&&e.Deal&&(t.DealId=e.Deal.id,t.Deal=e.Deal):r.getDeal(e.DealId).then(function(e){t.Deal=e,t.DealId=e.id}),t},f.getRecipientName=function(t){var n=e.defer(),r=o.getRoom(t);return null!==r?n.resolve(r.userName):a.getSingleRoom(t).$promise.then(function(e){n.resolve(e.userName)}),n.promise},f.getRecipientHashedId=function(t){var n=e.defer(),r=o.getRoom(t);return null!==r?n.resolve(r.userId):a.getSingleRoom(t).$promise.then(function(e){n.resolve(e.userId)}),n.promise},f.getRecipientUserData=function(t){var o=e.defer();return f.getRecipientHashedId(t).then(function(e){a.getOtherUser(e).$promise.then(function(e){o.resolve(e)})}),o.promise},f.getMessagesFromBackend=function(t){var o=e.defer(),r=d(t);return null!==r?o.resolve(r):window.cordova&&n.isInitialized()?n.getRoomMessages(t).then(function(e){for(var n=[],r=0;r<e.length;r++)n.push(f.formatMessage(e[r]));n.sort(function(e,t){return e.timestamp-t.timestamp}),p[t]=n,o.resolve(n)}):a.getRoomMessages(t).$promise.then(function(e){var n=[];e.forEach(function(e){n.push(f.formatMessage(e))}),n.sort(function(e,t){return e.timestamp-t.timestamp}),p[t]=n,o.resolve(n)}),o.promise},f}]),angular.module("letterbox.services").service("ChromeNotifService",["$timeout","eventbus","ChatService",function(e,t,o){function n(t,o){var n=new r(t,{body:o,icon:"img/android-icon-48x48.png"});n.onshow=function(){e(function(){n.close()},1e4)}}if(-1!==document.URL.indexOf("http://")||-1!==document.URL.indexOf("https://")){var r=window.Notification||window.mozNotification||window.webkitNotification;"granted"!==r.permission&&r.requestPermission(),t.registerListener("roomMessage",function(e){var t=e.message,r=e.senderName,i=o.formatMessage(t);i.isOwner||n(r,i.content)})}}]),angular.module("letterbox.services").service("DbService",["$q","$window","socket","backend","eventbus",function(e,t,o,n,r){function i(e){c.isInitialized()||e.reject({err:"DbService not initialized"})}function a(){var t=e.defer();return s.sqlite.transaction(function(e){e.executeSql("SELECT * FROM rooms",[],function(e,o){for(var n=[],r=0;r<o.rows.length;r++){var i=o.rows.item(r);n.push({hash:i.hash,userId:i.userId,userName:i.userName,thumbnail:i.thumbnail,profilePicture:i.profilePicture,createdAt:i.createdAt})}t.resolve(n)})}),t.promise}var s={isInitialized:!1},c={};return c.isInitialized=function(){return s.isInitialized&&"undefined"!=typeof s.sqlite},c.init=function(){window.cordova&&document.addEventListener("deviceready",function(){s.sqlite=t.sqlitePlugin.openDatabase({name:"letterbox.db",createFromLocation:1}),s.sqlite.transaction(function(e){e.executeSql("CREATE TABLE IF NOT EXISTS rooms (hash CHAR(32) PRIMARY KEY, userId CHAR(32) NOT NULL, userName VARCHAR(256) NOT NULL, thumbnail TEXT NOT NULL, profilePicture TEXT NOT NULL, createdAt DATETIME NOT NULL)"),e.executeSql("CREATE TABLE IF NOT EXISTS messages (roomHash CHAR(32) NOT NULL REFERENCES rooms(hash), sender VARCHAR(256) NOT NULL, content TEXT NOT NULL, timeSent BIGINT NOT NULL, isRead BOOLEAN NOT NULL DEFAULT 0, type VARCHAR(256) NOT NULL DEFAULT 'message', DealId INTEGER, PRIMARY KEY (roomHash, sender, timeSent))"),s.sqlite.executeSql("PRAGMA user_version",[],function(e){var t=e.rows.item(0).user_version;1>t&&(s.sqlite.executeSql("ALTER TABLE messages ADD COLUMN type VARCHAR(256) NOT NULL DEFAULT 'message'"),s.sqlite.executeSql("ALTER TABLE messages ADD COLUMN DealId INTEGER"),s.sqlite.executeSql("PRAGMA user_version=1")),s.isInitialized=!0,r.call("dbInitialized")})})},!1)},c.addRoom=function(t,o,n,r,a,c){var l=e.defer();return i(l),s.sqlite.transaction(function(e){e.executeSql("SELECT COUNT(*) AS cnt FROM rooms WHERE hash=?",[t],function(e,i){i.rows.item(0).cnt?e.executeSql("UPDATE rooms SET userName=?, thumbnail=?, profilePicture=? WHERE hash=?",[n,r,a,t],function(e,t){l.resolve(t)}):e.executeSql("INSERT INTO rooms VALUES (?,?,?,?,?,?)",[t,o,n,r,a,c],function(e,t){l.resolve(t)})})}),l.promise},c.addMessage=function(t,o,n,r,a,l,u){var d=e.defer();return i(d),s.sqlite.transaction(function(e){e.executeSql("SELECT COUNT(*) AS cnt FROM messages WHERE roomHash=? AND sender=? AND content=? AND timeSent=?",[t,o,n,r],function(e,i){i.rows.item(0).cnt?d.reject({error:"message already exists"}):e.executeSql("INSERT INTO messages (roomHash, sender, content, timeSent, isRead, type, DealId) VALUES (?,?,?,?,?,?,?)",[t,o,n,r,a,l?l:"message",u?u:null],function(e,o){a&&c.markMessagesAsRead(t,r),d.resolve(o)})})}),d.promise},c.markMessagesAsRead=function(t,o){var n=e.defer();return i(n),s.sqlite.transaction(function(e){e.executeSql("UPDATE messages SET isRead=1 WHERE roomHash=? AND timeSent<=?",[t,o],function(e,t){n.resolve(t)})}),n.promise},c.getSingleRoom=function(t){var o=e.defer();return i(o),s.sqlite.transaction(function(e){e.executeSql("SELECT * FROM rooms WHERE hash=?",[t],function(e,n){if(n.rows.length>0){var r=n.rows.item(0),i={hash:r.hash,userId:r.userId,userName:r.userName,thumbnail:r.thumbnail,profilePicture:r.profilePicture,createdAt:r.createdAt,latestMessage:{}};e.executeSql("SELECT * FROM messages WHERE roomHash=? ORDER BY timeSent DESC LIMIT 1",[t],function(e,n){if(n.rows.length>0){var r=n.rows.item(0);i.latestMessage.sender=r.sender,i.latestMessage.content=r.content,i.latestMessage.timeSent=r.timeSent}e.executeSql("SELECT COUNT(*) AS unreadCount FROM messages WHERE roomHash=? AND isRead!=1 AND sender<>?",[t,window.localStorage.getItem("hashedId")],function(e,t){i.unreadCount=t.rows.item(0).unreadCount,o.resolve(i)})})}else o.reject({error:"room does not exist"})})}),o.promise},c.updateRooms=function(){var t=e.defer();return n.getRooms().$promise.then(function(e){e.forEach(function(e){c.addRoom(e.hash,e.userId,e.userName,e.thumbnail,e.profilePicture,e.createdAt).then(function(e){})}),t.resolve(e)}),t.promise},c.getRooms=function(){var t=e.defer();return i(t),o.isConnected()?c.updateRooms().then(t.resolve):a().then(t.resolve),t.promise},c.getRoomMessages=function(t){var o=e.defer();return i(o),s.sqlite.transaction(function(e){e.executeSql("SELECT * FROM messages WHERE roomHash=? ORDER BY timeSent ASC",[t],function(e,t){for(var n=[],r=0;r<t.rows.length;r++){var i=t.rows.item(r);n.push({RoomHash:i.roomHash,content:i.content,timeSent:i.timeSent,sender:i.sender,type:i.type,DealId:i.DealId})}o.resolve(n)})}),o.promise},c.getUnreadCounts=function(){var t=e.defer();return i(t),s.sqlite.transaction(function(e){e.executeSql("SELECT roomHash, COUNT(*) as cnt FROM messages GROUP BY roomHash, isRead HAVING isRead=0",[],function(e,o){t.resolve(o)})}),t.promise},c.getLatestTimeSent=function(){var t=e.defer();return i(t),s.sqlite.transaction(function(e){e.executeSql("SELECT MAX(timeSent) as maxtime FROM messages",[],function(e,o){o.rows.length>0?t.resolve(o.rows.item(0).maxtime):t.resolve(0)})}),t.promise},c.getLastestMessage=function(t){var o=e.defer();return i(o),s.sqlite.transaction(function(e){e.executeSql("SELECT sender, content, timeSent FROM messages WHERE roomHash=? ORDER BY timeSent DESC LIMIT 1",[t],function(e,t){o.resolve(t.rows.item(0))})}),o.promise},c.deleteRoom=function(t){var o=e.defer();return i(o),s.sqlite.transaction(function(e){e.executeSql("DELETE FROM rooms WHERE hash=?",[t],function(e,t){o.resolve(t)})}),o.promise},c.deleteRoomMessages=function(t){var o=e.defer();return i(o),s.sqlite.transaction(function(e){e.executeSql("DELETE FROM messages WHERE roomHash=?",[t],function(e,t){o.resolve(t)})}),o.promise},c.clearAll=function(){var t=e.defer();return i(t),c.isInitialized()&&s.sqlite.transaction(function(e){e.executeSql("DELETE FROM messages",[],function(e,o){e.executeSql("DELETE FROM rooms",[],function(e,o){t.resolve()})})}),t.promise},c}]),angular.module("letterbox.services").service("DealService",["$q","backend",function(e,t){var o=this;o.showShare=!1,o.getAllDeals=function(e,t){return o.getDeals("all",e,t)},o.getDeals=function(o,n,r){var i=e.defer();return t.getDealsByCat(o,n,r).then(i.resolve,i.reject),i.promise},o.getFeaturedDeals=function(o,n){var r=e.defer();return t.getFeaturedDeals(o,n).then(r.resolve,r.reject),r.promise},o.getDeal=function(o){var n=e.defer();return t.getDealById(o).then(n.resolve,n.reject),n.promise},o.toggleDealLike=function(o){var n=e.defer();return t.toggleDealLike(o).then(n.resolve,n.reject),n.promise},o.getOwnLikedDeals=function(){var o=e.defer();return t.getUserLikedDeals("self").then(o.resolve,o.reject),o.promise},o.getUserLikedDeals=function(o){var n=e.defer();return t.getUserLikedDeals(o).then(n.resolve,n.reject),n.promise},o.getMutualLikedDeals=function(o){var n=e.defer();return t.getMutualLikedDeals(o).then(n.resolve,n.reject),n.promise},o.checkDealCompatability=function(o){var n=e.defer();return t.getOtherUserVersion(o).then(function(e){e.minor>=1?n.resolve():n.reject()},n.reject),n.promise}}]),angular.module("letterbox.services").service("eventbus",["$q",function(e){function t(t,o){return e(function(e,n){try{t(o),e()}catch(r){console.log(r.stack),n()}})}var o={},n={};return o.deregisterAllListeners=function(e){console.log("deregistered listener: "+e),n[e]instanceof Array&&(n[e]=[])},o.registerListener=function(e,t){console.log("registered listener: "+e),n[e]instanceof Array?n[e].push(t):n[e]=[t]},o.call=function(e,o){if(console.log("called listener: "+e),n[e]instanceof Array)for(var r=0;r<n[e].length;r++){var i=t(n[e][r],o);i.then(function(){console.log("successfully called "+e)},function(){console.log("error when calling "+e)})}},o}]),angular.module("letterbox.services").service("letterService",function(){var e=this;e.targetUserCard={},e.setTargetUserCard=function(t){e.targetUserCard=t}}),angular.module("letterbox.services").service("LocalNotificationService",["$state","eventbus","BackgroundService",function(e,t,o){function n(){window.cordova&&(window.cordova.plugins.notification.local.on("click",function(t){var o=JSON.parse(t.data);"room"===o.type?e.go("app.chat",{chatId:o.RoomHash}):"letter"===o.type&&e.go("app.notifications")}),t.registerListener("roomMessage",function(t){t.message.sender===window.localStorage.getItem("hashedId")||!o.isInBackground()&&e.includes("app.chat",{chatId:t.message.RoomHash})||window.cordova.plugins.notification.local.schedule({id:1,text:t.senderName+": "+t.message.content,data:{type:"room",RoomHash:t.message.RoomHash},smallIcon:"res://notification"})}),t.registerListener("roomCreated",function(e){o.isInBackground()&&window.cordova.plugins.notification.local.schedule({id:1,text:e.approverName+" just started a chat with you!",data:{type:"room",RoomHash:roomMessage.message.RoomHash},smallIcon:"res://notification"})}),t.registerListener("letterReceived",function(e){o.isInBackground()&&window.cordova.plugins.notification.local.schedule({id:1,text:"You've received a letter!",data:{type:"letter",LetterHash:e.hash},smallIcon:"res://notification"})}))}var r={};return r.clearLocalNotifications=function(){window.cordova&&window.cordova.plugins.notification.local.clearAll(function(){},this)},o.registerOnResume(function(){r.clearLocalNotifications()}),document.addEventListener("deviceready",n,!1),r}]),angular.module("letterbox.services").service("MatchService",["$q","$ImageCacheFactory","backend","AuthService",function(e,t,o,n){var r=this;r.previousId="",r.getMatch=function(){var i=e.defer();if(n.isRegistered()){var a=window.localStorage.getItem("distanceRadius")?window.localStorage.getItem("distanceRadius"):50,s=window.localStorage.getItem("minAge")?window.localStorage.getItem("minAge"):18,c=window.localStorage.getItem("maxAge")?window.localStorage.getItem("maxAge"):80;o.getMatch(a,r.previousId,s,c).$promise.then(function(e){200===e.code?t.Cache([e.pictureMed]).then(function(){r.previousId=e.hashedId,i.resolve(e)},function(){i.reject()}):i.reject()},function(e){i.reject()})}else i.reject();return i.promise}}]),angular.module("letterbox.services").service("NotificationsService",["$q","backend",function(e,t){function o(e){for(var t=[],o=0;o<e.LetterAnswers.length;o++){var n=e.LetterAnswers[o];t.push({option0:n.WyrQuestion.option0,option1:n.WyrQuestion.option1,answer:n.answer,isCorrect:n.isCorrect})}var r="answered your questions. Click here to see "+("male"===e.UserAccount.gender?"his":"her")+" responses.";return{id:e.hash,userId:e.UserAccount.hashedId,isRead:e.isRead,createdAt:e.createdAt,from:e.UserAccount.firstName,fromGender:e.UserAccount.gender,age:(new Date).getYear()-new Date(e.UserAccount.birthday).getYear(),bio:e.UserAccount.bio,profilePicThumb:e.UserAccount.pictureThumb,profilePicMed:e.UserAccount.pictureMed,questionsAnswers:t,message:r,likedDeals:[]}}var n=[],r="letters";return{getTab:function(){return r},setTab:function(e){r=e},getNotificationsList:function(){var r=e.defer();return t.getAllLetters().$promise.then(function(e){var t=[];e.forEach(function(e){t.push(o(e))}),n=t,r.resolve(t)}),r.promise},getNumberOfNotifications:function(){var o=e.defer();return t.getAllLetters().$promise.then(function(e){var t=0;e.forEach(function(e){e.isRead||t++}),o.resolve(t)}),o.promise},getNotificationFromId:function(t){var o=e.defer(),r=!1;return 0!==n.length?(n.forEach(function(e){e.id===t&&(r=!0,o.resolve(e))}),r||o.resolve(null),o.promise):void this.getNotificationsList().then(function(o){var i=e.defer();return n.forEach(function(e){e.id===t&&(r=!0,i.resolve(e))}),r||i.resolve({}),i.promise})}}}]),angular.module("letterbox.services").service("ProfileService",["$q","backend",function(e,t){return{getProfile:function(){var o=e.defer();return t.getUserSelf().$promise.then(function(e){o.resolve(e)}),o.promise},getOtherProfile:function(o){var n=e.defer();return t.getOtherUser(o).$promise.then(function(e){n.resolve(e)}),n.promise},getNewQuestion:function(o){var n=e.defer();return t.getOneRandomQuestion(o).$promise.then(function(e){n.resolve(e)},function(e){n.resolve(null)}),n.promise},updateBio:function(o){var n=e.defer();return t.updateUserBio(o,function(e){n.resolve(e)},function(e){n.resolve(null)}),n.promise},updateQuestions:function(o){var n=e.defer();return t.setQuestionsAndAnswers(o,function(e){n.resolve(e)},function(e){n.resolve(null)}),n.promise},getProfilePictures:function(){var o=e.defer();return t.getProfilePhotos().$promise.then(function(e){var t=[];e.forEach(function(e){t.push(e)}),o.resolve(t)},function(e){o.reject(e)}),o.promise},updateProfilePicture:function(o){var n=e.defer();return t.setProfilePhoto(o,n.resolve,n.reject),n.promise}}}]),angular.module("letterbox.services").service("PushService",["backend",function(e){return{updatePushToken:function(){var t=window.localStorage.getItem("pushToken");t&&e.updatePushToken(t)}}}]),angular.module("letterbox.services").service("ReportService",["$q","$ionicPopup","backend",function(e,t,o){var n={};return n.reportUser=function(t,n){var r=e.defer();return o.reportUser(t,n,r.resolve,r.reject),r.promise},n.showReportPopup=function(e,o,r,i){return r.report={reason:""},r.warning="",t.show({template:'<textarea ng-model="report.reason"></textarea><p class="warning">{{ warning }}</p>',title:"Report "+e+"?",subTitle:"Please enter a reason behind this report",cssClass:"popup-alert",scope:r,buttons:[{text:"Cancel"},{text:"Report",type:"button-positive",onTap:function(e){!r.report.reason||r.report.reason.length<=10?(e.preventDefault(),r.warning="Please enter a reason at least 10 characters long."):n.reportUser(o,r.report.reason).then(function(){r.report.reason="","undefined"!=typeof i&&i()})}}]})},n}]),angular.module("letterbox.services").service("RoomsService",["$q","backend","DbService","eventbus",function(e,t,o,n){function r(e){var t=e.latestMessage,o=t.content?(t.sender===window.localStorage.getItem("hashedId")?"You: ":e.userName+": ")+t.content:"No messages yet",n=t.timeSent?new Date(t.timeSent):new Date(e.createdAt);return{id:e.hash,from:e.userName,profile_pic:e.thumbnail,last_message:o,last_activity:n,unread_count:e.unreadCount}}function i(e){for(var t=0;t<e.length;t++){var o=e[t];a.getLatestRoomInfo(o.hash).then(function(e){for(var t=r(e),o=!1,i=!1,a=0;a<c.length;a++)if(c[a].id===t.id){c[a].last_message!==t.last_message&&(c[a].last_message=t.last_message,i=!0),c[a].last_activity.getTime()!==t.last_activity.getTime()&&(c[a].last_activity=t.last_activity,i=!0),c[a].unread_count!==t.unread_count&&(c[a].unread_count=t.unread_count,n.call("unreadCountChanged"),i=!0),o=!0;break}o||(c.push(t),t.unread_count&&n.call("unreadCountChanged"),i=!0),i&&(c.sort(function(e,t){return t.last_activity.getTime()-e.last_activity.getTime()}),l&&l.$apply(),u&&u.$apply())})}}var a={},s=[],c=[],l=null,u=null;return n.registerListener("roomsUpdated",function(e){s=e,i(e)}),n.registerListener("roomRead",function(e){for(var t=0;t<c.length;t++){var o=c[t];if(o.id===e.roomHash){o.unread_count=0;break}}n.call("unreadCountChanged")}),n.registerListener("roomMessage",function(e){for(var t=e.message,o=0;o<c.length;o++)if(c[o].id===t.RoomHash){c[o].last_message=(t.sender===window.localStorage.getItem("hashedId")?"You: ":c[o].from+": ")+t.content,c[o].last_activity=new Date(t.timeSent),t.sender!==window.localStorage.getItem("hashedId")&&(c[o].unread_count++,n.call("unreadCountChanged"));break}c.sort(function(e,t){return t.last_activity.getTime()-e.last_activity.getTime()})}),a.getTotalUnreadCount=function(){for(var t=e.defer(),o=0,n=0;n<c.length;n++)o+=c[n].unread_count;return t.resolve(o),t.promise},a.setChatsPageScope=function(e){l=e},a.setNotifsPageScope=function(e){u=e},a.getChats=function(){return c},a.getRoom=function(e){for(var t=0;t<s.length;t++)if(s[t].hash===e)return s[t];return null},a.getLatestRoomInfo=function(n){var r=e.defer();return window.cordova&&o.isInitialized()?o.getSingleRoom(n).then(function(e){r.resolve(e)}):t.getSingleRoom(n).$promise.then(function(e){r.resolve(e)}),r.promise},a.updateRooms=function(){window.cordova&&o.isInitialized()?o.getRooms().then(function(e){n.call("roomsUpdated",e)}):t.getRooms().$promise.then(function(e){var t=[];e.forEach(function(e){t.push(e)}),n.call("roomsUpdated",t)})},a.getRoomLetter=function(o){var n=e.defer();return t.getSingleRoom(o).$promise.then(function(e){n.resolve(e.letter)},function(){n.reject()}),n.promise},n.registerListener("loginCompleted",a.updateRooms),a}]),angular.module("letterbox.services").service("socket",["$q","eventbus",function(e,t){var o="http://ec2-52-74-138-177.ap-southeast-1.compute.amazonaws.com",n={isInitialized:!1,socketio:null},r={};return r.uninit=function(){n.isInitialized=!1,n.socketio.disconnect(),n.socketio=null},r.init=function(){console.log("Initializing Socket IO...");var e=window.localStorage.getItem("token");!n.isInitialized&&e&&(n.isInitialized=!0,n.socketio=io.connect(o,{query:"token="+e}),n.socketio.connect(),n.socketio.on("connect",function(){t.call("socketConnected")}),n.socketio.on("disconnect",function(){t.call("socketDisconnected")}),n.socketio.on("roomCreated",function(e){t.call("roomCreated",e)}),n.socketio.on("roomMessage",function(e){t.call("roomMessage",e)}),n.socketio.on("letter",function(e){t.call("letterReceived",e)}),n.socketio.on("roomRead",function(e){t.call("roomRead",e)}))},r.isConnected=function(){return n.isInitialized&&n.socketio.connected},r.roomRead=function(t,o){var i=e.defer();if(r.isConnected()){var a={roomHash:t,time:o};n.socketio.emit("roomRead",a),i.resolve(a)}else n.isInitialized&&n.socketio.connected?i.reject({error:"socketio not connected"}):i.reject({error:"socketio not initialized"});return i.promise},r.sendMessage=function(t,o){var i=e.defer();if(r.isConnected()){var o={roomHash:t,message:o,type:"message"};n.socketio.emit("roomMessage",o),i.resolve(o)}else n.isInitialized&&n.socketio.connected?i.reject({error:"socketio not connected"}):i.reject({error:"socketio not initialized"});return i.promise},r.shareDeal=function(t,o,i){var a=e.defer();if(r.isConnected()){var o={roomHash:t,message:o,type:"share",dealId:i};n.socketio.emit("roomMessage",o),a.resolve(o)}else n.isInitialized&&n.socketio.connected?a.reject({error:"socketio not connected"}):a.reject({error:"socketio not initialized"});return a.promise},r}]),angular.module("letterbox.services").service("VibrateService",["$cordovaVibration","$state","ChatService","eventbus",function(e,t,o,n){function r(){e.vibrate(100)}document.addEventListener("deviceready",function(){window.cordova&&(n.registerListener("roomCreated",r),n.registerListener("letterReceived",r))},!1)}]);
//# sourceMappingURL=data:application/json;base64,
